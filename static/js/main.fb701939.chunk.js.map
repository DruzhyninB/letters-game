{"version":3,"sources":["assets/zoovu-z.svg","assets/zoovu-v.svg","assets/zoovu-o.svg","assets/zoovu-u.svg","Game.tsx","store/actions/timer.action.ts","store/actions/block.actions.ts","store/actions/dropzone.actions.ts","store/actions/general.action.ts","store/reducers/general.reducer.ts","store/reducers/timer.reducer.ts","utility/index.ts","store/reducers/dropzone.reducer.ts","pages/Game/store/reducers/index.ts","store/reducers/block.reducer.ts","store/reducers/index.ts","store/store.ts","config/browserHistory.ts","pages/Welcome/Welcome.tsx","pages/Welcome/WelcomeConfig.tsx","components/Timer/Timer.tsx","components/Menu/Menu.tsx","components/Block/Block.tsx","components/Modal/Modal.tsx","components/Dropzones/Dropzone.tsx","pages/Game/Game.tsx","config/routes.tsx","pages/Game/GameConfig.tsx","index.tsx"],"names":["module","exports","Game","props","checkRoute","prevProps","_","isEqual","this","location","pathname","matched","matchRoutes","routes","console","log","className","renderRoutes","React","withRouter","connect","state","ownProps","dispatch","bindActionCreators","ADD_TIME","startTimer","getState","timer","window","setInterval","type","payload","addTime","value","stopTimer","getTimeString","time","dr","moment","duration","hour","hours","minute","minutes","second","seconds","format","setInitialPos","id","x","y","setPosition","setDropzonePosition","position","dropToDropzone","block","dropzoneID","removeBlockFromDropzones","blockId","cleanDropzone","movingAt","dropzones","dropzone","list","p","top","height","left","width","SET_NAME","SHOW_MODAL","HIDE_MODAL","setName","name","checkAnswers","answers","sort","a","b","order","map","contain","dataset","letter","target","general","answer","step","userWin","restartGame","initialState","modal","visible","initialPropsReducer","action","Actions","undefined","clearInterval","Utl","S4","Math","floor","random","toString","substring","index","generateGUID","accepting","platformerReducer","element","find","initialPos","rootReducer","combineReducers","game","store","createStore","rootReducers","applyMiddleware","thunk","createBrowserHistory","Welcome","onNameChange","event","setState","onContinue","history","push","Fragment","placeholder","onChange","onClick","Component","WelcomeConfig","path","component","Timer","createRef","cn","Menu","imageMap","letterZ","letterV","letterU","letterO","Block","inDropzone","startPos","toSwap","onmousedown","currentTarget","getBoundingClientRect","shift","clientX","clientY","document","addEventListener","mousemove","mouseup","current","newTop","newLeft","style","elem","dropTo","move","removeEventListener","icon","ref","onMouseDown","data-letter","draggable","src","alt","Modal","startCountdown","interval","countdown","Dropzone","blocks","key","to","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.fb701939.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/zoovu-z.98d275b2.svg\";","module.exports = __webpack_public_path__ + \"static/media/zoovu-v.f04e5e7e.svg\";","module.exports = __webpack_public_path__ + \"static/media/zoovu-o.987e802d.svg\";","module.exports = __webpack_public_path__ + \"static/media/zoovu-u.509452d2.svg\";","import * as React from 'react';\nimport _ from 'lodash';\nimport { withRouter } from 'react-router-dom';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps } from \"react-router\";\nimport { matchRoutes, renderRoutes } from 'react-router-config';\nimport { AppState } from './store/store';\nimport { ThunkDispatch } from 'redux-thunk';\n\ninterface GameProps { routes: Array<object> }\ntype Props = GameProps & LinkStateProp & LinkDispatchprop & RouteComponentProps;\n\nclass Game extends React.Component<Props, any> {\n  constructor( props: Props ) {\n    super( props );\n    this.checkRoute();\n  }\n\n  componentDidUpdate( prevProps: Props ) {\n    if ( !_.isEqual( this.props.location.pathname, prevProps.location.pathname ) ) {\n      this.checkRoute();\n    }\n  }\n  checkRoute() {\n    const matched = matchRoutes( this.props.routes, this.props.location.pathname )[0];\n    if ( matched ) {\n      console.log( 'checkRoute -> ', matched );\n    }\n  }\n\n  render() {\n    let { routes } = this.props;\n    return (\n      <React.Fragment>\n        <div className=\"decorations\"></div>\n        {renderRoutes( routes )}\n      </React.Fragment>\n    )\n  }\n}\n\ninterface LinkDispatchprop {\n\n}\nfunction mdtp( dispatch: ThunkDispatch<any, any, any>, ownProps: Props ): LinkDispatchprop {\n  return bindActionCreators( {\n\n  }, dispatch );\n}\n\ninterface LinkStateProp {\n\n}\nfunction mstp( state: AppState, ownProps: Props ): LinkStateProp {\n  return {\n\n  }\n}\n\nexport default withRouter( connect( mstp, mdtp )( Game ) ) as any;\n","import { Dispatch } from 'redux';\nimport { AppState } from 'store/store';\nimport moment from 'moment';\n\n\nexport const START_TIME = '[TIMER] START_TIME';\nexport const STOP_TIME = '[TIMER] STOP_TIME';\nexport const ADD_TIME = '[TIMER] ADD_TIME';\nexport const RESET_TIME = '[TIMER] RESET_TIME';\n\nexport interface TimerStartTimerAction {\n    type: typeof START_TIME;\n    payload: number\n}\nexport interface TimerStopTimerAction {\n    type: typeof STOP_TIME;\n}\nexport interface TimerResetTimerAction {\n    type: typeof RESET_TIME;\n}\nexport interface TimerAddTimerAction {\n    type: typeof ADD_TIME;\n    payload: number\n}\n\nexport const startTimer = () => {\n    return (dispatch: Dispatch<TimerActionsType>, getState: () => AppState): number => {\n        let timer = window.setInterval(() => {\n            dispatch({ type: ADD_TIME, payload: 1000 })\n        }, 1000)\n        dispatch({ type: START_TIME, payload: timer });\n        return timer\n    }\n};\n\nexport const addTime = (value: number) => {\n    return (dispatch: Dispatch<TimerActionsType>, getState: () => AppState): void => {\n        dispatch({ type: ADD_TIME, payload: value });\n    }\n}\nexport const stopTimer = () => {\n    return (dispatch: Dispatch<TimerActionsType>, getState: () => AppState): void => {\n        dispatch({type:STOP_TIME});\n    }\n};\nexport const resetTimer = () => {\n    return (dispatch: Dispatch<TimerActionsType>, getState: () => AppState): void => {\n        dispatch({type:RESET_TIME});\n    }\n};\nexport const getTimeString = () => {\n    return (dispatch: Dispatch<TimerActionsType>, getState: () => AppState): string => {\n        let time = getState().timer.time,\n            dr = moment.duration(time),\n            string = moment().hour(dr.hours()).minute(dr.minutes()).second(dr.seconds()).format('HH:mm:ss');\n        return string;\n    }\n}\nexport type TimerActionsType =\n    TimerStartTimerAction | TimerStopTimerAction | TimerAddTimerAction | TimerResetTimerAction;","\nimport { Dispatch } from 'redux';\nimport { AppState } from 'store/store';\n\nexport const SET_INITIAL_POS = '[BLOCK] SET_INITIAL_POS';\nexport const SET_POSITION = '[BLOCK] SET_POSITION';\nexport const RESET_BLOCKS = '[BLOCK] RESET_BLOCKS';\n\nexport interface BlockSetInitialPosAction {\n    type: typeof SET_INITIAL_POS;\n    payload: {\n        x: number,\n        y: number,\n        id: string\n    }\n}\nexport interface BlockSetPosAction {\n    type: typeof SET_POSITION;\n    payload: {\n        x: number,\n        y: number,\n        id: string\n    }\n}\nexport interface BlockRefreshBlocksAction {\n    type: typeof RESET_BLOCKS;\n}\n\n\nexport const setInitialPos = (id: string, { x, y }: { x: number, y: number }) => {\n    return (dispatch: Dispatch<BlockActionsType>, getState: () => AppState) => {\n        dispatch({ type: SET_INITIAL_POS, payload: { x, y, id } });\n    }\n};\n\nexport const setPosition = (id: string, { x, y }: { x: number, y: number }) => {\n    return (dispatch: Dispatch<BlockActionsType>, getState: () => AppState): void => {\n        dispatch({ type: SET_POSITION, payload: { x, y, id } });\n    }\n}\n\nexport const resetBlocks = () => {\n    return (dispatch: Dispatch<BlockActionsType>, getState: () => AppState): void => {\n        dispatch({ type: RESET_BLOCKS });\n    }\n};\nexport type BlockActionsType =\n    BlockSetInitialPosAction | BlockSetPosAction | BlockRefreshBlocksAction;\n","\nimport { Dispatch } from 'redux';\nimport { AppState } from 'store/store';\nimport { DropzoneObject } from 'components/Dropzones/Dropzone';\n\nexport const SET_DROPZONE_POS = '[DROPZONE] SET_DROPZONE_POS';\nexport const ADD_TO_DROPZONE = '[DROPZONE] ADD_TO_DROPZONE';\nexport const CLEAN_DROPZONE = '[DROPZONE] UPDATE_DROPZONE';\nexport const REMOVE_BLOCK_DROPZONE = '[DROPZONE] REMOVE_BLOCK_DROPZONE';\nexport const RESET_DROPZONE = '[DROPZONE] RESET_DROPZONE';\n\nexport interface DropzoneSetpositionAction {\n    type: typeof SET_DROPZONE_POS;\n    payload: {\n        id: string,\n        position: DOMRect\n    }\n}\nexport interface DropzoneAddToDropzoneAction {\n    type: typeof ADD_TO_DROPZONE;\n    payload: {\n        block: HTMLDivElement,\n        id: string\n    }\n}\nexport interface DropzoneRemoveBlockAction {\n    type: typeof REMOVE_BLOCK_DROPZONE;\n    payload: string\n}\nexport interface DropzoneCleanAction {\n    type: typeof CLEAN_DROPZONE;\n    payload: string\n}\nexport interface DropzoneResetAction {\n    type: typeof RESET_DROPZONE;\n}\n\n\nexport const setDropzonePosition = (id: string, position: DOMRect) => {\n    return (dispatch: Dispatch<DropzoneActionsType>, getState: () => AppState): void => {\n        dispatch({\n            type: SET_DROPZONE_POS, payload: {\n                id, position\n            }\n        });\n    }\n};\n\nexport const dropToDropzone = (block: HTMLDivElement, dropzoneID: string) => {\n    return (dispatch: Dispatch<DropzoneActionsType>, getState: () => AppState): void => {\n        dispatch({\n            type: ADD_TO_DROPZONE, payload: {\n                block,\n                id: dropzoneID\n            }\n        });\n    }\n}\n\nexport const removeBlockFromDropzones = (blockId: string) => {\n    return (dispatch: Dispatch<DropzoneActionsType>, getState: () => AppState): void => {\n        dispatch({\n            type: REMOVE_BLOCK_DROPZONE, payload: blockId\n        });\n    }\n}\n\nexport const cleanDropzone = (dropzoneID: string) => {\n    return (dispatch: Dispatch<DropzoneActionsType>, getState: () => AppState): void => {\n        dispatch({\n            type: CLEAN_DROPZONE, payload: dropzoneID\n        });\n    }\n}\n\nexport const resetDropzones = () => {\n    return (dispatch: Dispatch<DropzoneActionsType>, getState: () => AppState): void => {\n        dispatch({\n            type: RESET_DROPZONE\n        });\n    }\n}\n\nexport const movingAt = ({ x, y }: { x: number, y: number }) => {\n    return (dispatch: Dispatch<DropzoneActionsType>, getState: () => AppState): DropzoneObject | null => {\n        let dropzones = getState().dropzone.list;\n\n        for (const dropzone of dropzones) {\n            let { position: p } = dropzone;\n            if (p &&\n                y >= p.top &&\n                y <= p.top + p.height &&\n                x >= p.left &&\n                x <= p.left + p.width\n            ) {\n                return dropzone;\n            }\n        }\n        return null;\n    }\n}\n\n\nexport type DropzoneActionsType =\n    DropzoneSetpositionAction | DropzoneAddToDropzoneAction | DropzoneCleanAction | DropzoneRemoveBlockAction | DropzoneResetAction;\n","import { Dispatch } from 'redux';\nimport { AppState } from 'store/store';\nimport { stopTimer } from './timer.action';\nimport { AppActions } from '.';\nimport { resetBlocks } from './block.actions';\nimport { resetDropzones } from './dropzone.actions';\nimport { resetTimer } from './timer.action';\n\nexport const SET_NAME = '[GENERAL] SET_NAME';\nexport const SHOW_MODAL = '[GENERAL] SHOW_MODAL';\nexport const HIDE_MODAL = '[GENERAL] HIDE_MODAL';\n\nexport interface GeneralSetNameAction {\n    type: typeof SET_NAME;\n    payload: string\n}\nexport interface GeneralShowModalAction {\n    type: typeof SHOW_MODAL;\n}\nexport interface GeneralHideModalAction {\n    type: typeof HIDE_MODAL;\n}\n\nexport const setName = (name: string) => {\n    return (dispatch: Dispatch<GeneralActionsType>, getState: () => AppState): void => {\n        dispatch({ type: SET_NAME, payload: name });\n    }\n};\nexport const showModal = () => {\n    return (dispatch: Dispatch<GeneralActionsType>, getState: () => AppState): void => {\n        dispatch({ type: SHOW_MODAL });\n    }\n};\nexport const hideModal = () => {\n    return (dispatch: Dispatch<GeneralActionsType>, getState: () => AppState): void => {\n        dispatch({ type: HIDE_MODAL });\n    }\n};\nexport const checkAnswers = () => {\n    return (dispatch: Dispatch<AppActions>, getState: () => AppState): void => {\n        let answers =\n            getState().dropzone.list\n                .sort((a, b) => a.order - b.order)\n                .map(x => {\n                    return x.contain ? x.contain.dataset.letter : null;\n                });\n        let target = getState().general.answer;\n\n        for (const step in target) {\n            if (answers[step] !== target[step]) {\n                return;\n            }\n        }\n        dispatch(userWin());\n    }\n};\nexport const userWin = () => {\n    return (dispatch: Dispatch<AppActions>, getState: () => AppState): void => {\n        dispatch(stopTimer());\n        dispatch(showModal());\n    }\n};\nexport const restartGame = () => {\n    return (dispatch: Dispatch<AppActions>, getState: () => AppState): void => {\n        dispatch(resetTimer());\n        dispatch(resetBlocks());\n        dispatch(resetDropzones());\n        dispatch(hideModal());\n    }\n};\nexport type GeneralActionsType =\n    GeneralSetNameAction | GeneralShowModalAction |GeneralHideModalAction;","import * as Actions from '../actions';\r\n\r\ntype generalPropsReducerType = {\r\n    name: string,\r\n    answer: string[],\r\n    modal:{\r\n        visible:boolean\r\n    }\r\n}\r\nexport const initialState: generalPropsReducerType = {\r\n    name: '',\r\n    answer: ['z', 'o', 'o', 'v', 'u'],\r\n    modal:{\r\n        visible: false\r\n    }\r\n};\r\n\r\nconst initialPropsReducer = function (state = initialState, action: Actions.AppActions): generalPropsReducerType {\r\n    switch (action.type) {\r\n        case Actions.HIDE_MODAL:{\r\n            return{\r\n                ...state,\r\n                modal:{\r\n                    ...state.modal,\r\n                    visible:false\r\n                }\r\n            }\r\n        }\r\n        case Actions.SHOW_MODAL:{\r\n            return{\r\n                ...state,\r\n                modal:{\r\n                    ...state.modal,\r\n                    visible:true\r\n                }\r\n            }\r\n        }\r\n        case Actions.SET_NAME: {\r\n            return {\r\n                ...state,\r\n                name: action.payload\r\n            }\r\n        }\r\n        default:\r\n            {\r\n                return state;\r\n            }\r\n    }\r\n};\r\n\r\nexport default initialPropsReducer;","import * as Actions from '../actions';\r\n\r\ntype timerPropsReducerType = {\r\n    time:number,\r\n    timer:number | undefined,\r\n}\r\nexport const initialState: timerPropsReducerType = {\r\n    time: 0,\r\n    timer:undefined\r\n};\r\n\r\nconst initialPropsReducer = function ( state = initialState, action: Actions.TimerActionsType ): timerPropsReducerType {\r\n    switch ( action.type ) {\r\n        case Actions.ADD_TIME:{\r\n            return {\r\n                ...state,\r\n                time:state.time + action.payload\r\n            }\r\n        }\r\n        case Actions.START_TIME:{\r\n            return {\r\n                ...state,\r\n                timer:action.payload\r\n            }\r\n        }\r\n        case Actions.RESET_TIME:{\r\n            return {\r\n                ...state,\r\n                timer:undefined,\r\n                time:0\r\n            }\r\n        }\r\n        case Actions.STOP_TIME:{\r\n            clearInterval(state.timer);\r\n            return {\r\n                ...state,\r\n                timer:undefined\r\n            }\r\n        }\r\n        default:\r\n            {\r\n                return state;\r\n            }\r\n    }\r\n};\r\n\r\nexport default initialPropsReducer;","export default class Utl {\r\n    static generateGUID()\r\n    {\r\n        function S4()\r\n        {\r\n            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        }\r\n\r\n        return S4() + S4();\r\n    }\r\n}","import * as Actions from '../actions';\nimport { DropzoneObject } from 'components/Dropzones/Dropzone';\nimport Utl from 'utility';\n\n\ntype DropzoneReducerType = {\n    list: DropzoneObject[]\n}\n\nconst initialState: DropzoneReducerType = {\n    list: ['z', 'o', 'o', 'v', 'u'].map((letter, index) => {\n        return {\n            id: Utl.generateGUID(),\n            position: null,\n            accepting: letter,\n            order: index,\n            contain: null\n        }\n    })\n};\n\nconst platformerReducer = function (state = initialState, action: Actions.AppActions): DropzoneReducerType {\n    switch (action.type) {\n        case Actions.RESET_DROPZONE: {\n            let list = state.list.map(element => {\n                element.contain = null;\n                return { ...element }\n            })\n            return {\n                ...state,\n                list: [...list]\n            }\n        }\n        case Actions.REMOVE_BLOCK_DROPZONE: {\n            let dropzone = state.list.find(x => {\n                return x.contain && x.contain.id === action.payload;\n            });\n            if (dropzone) {\n                dropzone.contain = null;\n            }\n            return {\n                ...state,\n                list: [...state.list]\n            }\n        }\n        case Actions.CLEAN_DROPZONE: {\n            let dropzone = state.list.find(x => x.id === action.payload);\n            if (dropzone)\n                dropzone.contain = null;\n            return {\n                ...state,\n                list: [...state.list]\n            }\n        }\n        case Actions.ADD_TO_DROPZONE: {\n            let dropzone = state.list.find(x => x.id === action.payload.id);\n            if (dropzone)\n                dropzone.contain = action.payload.block;\n            return {\n                ...state,\n                list: [...state.list]\n            }\n        }\n        case Actions.SET_DROPZONE_POS: {\n            let dropzone = state.list.find(x => {\n                return x.id === action.payload.id;\n            });\n            if (dropzone)\n                dropzone.position = action.payload.position;\n            return {\n                ...state,\n                list: [...state.list]\n            }\n        }\n        default:\n            {\n                return state;\n            }\n    }\n};\n\nexport default platformerReducer;","import * as Actions from '../actions';\r\n\r\ntype PlatformerReducerType = {\r\n\r\n}\r\n\r\nconst initialState: PlatformerReducerType = {\r\n\r\n};\r\n\r\nconst platformerReducer = function ( state = initialState, action: Actions.GameActionsType ): PlatformerReducerType {\r\n    switch ( action.type ) {\r\n\r\n        default:\r\n            {\r\n                return state;\r\n            }\r\n    }\r\n};\r\n\r\nexport default platformerReducer;","import * as Actions from '../actions';\nimport { BlockObject } from 'components/Block/Block'\nimport Utl from 'utility';\n\ntype BlockReducerType = {\n    list: BlockObject[]\n}\n\nexport const initialState: BlockReducerType = {\n    list: ['z', 'o', 'o', 'v', 'u'].sort(() => Math.random() - 0.5).map(letter => {\n        return {\n            id: Utl.generateGUID(),\n            letter,\n            initialPos: null,\n            position: { top: 'unset', left: 'unset', position: 'relative' }\n        }\n    })\n};\n\nconst platformerReducer = function (state = initialState, action: Actions.AppActions): BlockReducerType {\n    switch (action.type) {\n        case Actions.RESET_BLOCKS: {\n            let list = state.list.sort(() => Math.random() - 0.5).map(element => {\n                element.id = Utl.generateGUID();\n                if (element.initialPos)\n                    element.position = {\n                        ...element.position,\n                        top: element.initialPos.y,\n                        left: element.initialPos.x\n                    }\n                return { ...element }\n            })\n            return {\n                ...state,\n                list: [...list]\n            }\n        }\n        case Actions.SET_INITIAL_POS: {\n            let block = state.list.find(x => {\n                return x.id === action.payload.id;\n            });\n            if(block){\n                block.initialPos = {\n                    y: action.payload.y,\n                    x: action.payload.x,\n                }\n                block.position = {\n                    position: 'absolute',\n                    left: action.payload.x,\n                    top: action.payload.y\n                }\n            }\n            return {\n                ...state,\n                list: [...state.list]\n            }\n        }\n        case Actions.SET_POSITION: {\n            let block = state.list.find(x => {\n                return x.id === action.payload.id;\n            });\n            if(block){\n                block.position = {\n                    ...block.position,\n                    left: action.payload.x,\n                    top: action.payload.y\n                }\n            }\n            return {\n                ...state,\n                list: [...state.list]\n            }\n        }\n        default:\n            {\n                return state;\n            }\n    }\n};\n\nexport default platformerReducer;","import {combineReducers} from 'redux';\r\n\r\nimport general from './general.reducer';\r\nimport timer from './timer.reducer';\r\nimport dropzone from './dropzone.reducer';\r\nimport game from 'pages/Game/store/reducers';\r\nimport block from './block.reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    general,\r\n    game,\r\n    block,\r\n    timer,\r\n    dropzone\r\n});\r\n\r\nexport default rootReducer;\r\n","import {applyMiddleware, createStore} from 'redux';\r\nimport thunk, { ThunkMiddleware } from 'redux-thunk';\r\nimport rootReducers from './reducers';\r\nimport { AppActions } from './actions';\r\n\r\n\r\nconst store = createStore(rootReducers, applyMiddleware(thunk as ThunkMiddleware<AppState, AppActions>));\r\n\r\nexport type AppState = ReturnType<typeof rootReducers>\r\nexport default store;","import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import React, { ChangeEvent } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport * as Actions from 'store/actions';\r\n\r\n// Types\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { AppState } from 'store/store';\r\n\r\n// Styles\r\nimport './Welcome.scss'\r\n\r\ninterface WelcomeProps { }\r\ntype Props = WelcomeProps & LinkStateProp & LinkDispatchProp & RouteComponentProps;\r\n\r\nclass Welcome extends React.Component<Props, any> {\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      name: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  onNameChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n    let { target } = event;\r\n    this.setState({ name: target.value });\r\n  }\r\n\r\n  onContinue = () => {\r\n    let {name} = this.state;\r\n    if(!name){\r\n      return;\r\n    }\r\n    this.props.setName(this.state.name);\r\n    this.props.history.push('/game');\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"welcome-wrapper\">\r\n          <h1 className=\"welcome-title\">Hello friend, tell me your name...</h1>\r\n          <div className=\"welcome-input\">\r\n            <input type=\"text\" placeholder=\"Your name here\" value={this.state.name} onChange={this.onNameChange} />\r\n          </div>\r\n          <div className=\"welcome-continue\">\r\n            <button onClick={this.onContinue}>Let's go →</button>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\ninterface LinkDispatchProp {\r\n  setName: (name: string) => void;\r\n}\r\nfunction mdtp(dispatch: ThunkDispatch<any, any, Actions.GeneralActionsType>, ownProps: Props): LinkDispatchProp {\r\n  return bindActionCreators({\r\n    setName: Actions.setName,\r\n  }, dispatch);\r\n}\r\n\r\ninterface LinkStateProp {\r\n  name: string,\r\n}\r\nfunction mstp(state: AppState, ownProps: Props): LinkStateProp {\r\n  return {\r\n    name: state.general.name,\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mstp, mdtp)(Welcome)) as any;\r\n","import Welcome from './Welcome';\r\n\r\nexport const WelcomeConfig = {\r\n  path: '/welcome',\r\n  component: Welcome\r\n}","import React, { createRef } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport cn from 'classnames';\n\nimport * as Actions from 'store/actions';\n\n//Types\nimport { ThunkDispatch } from 'redux-thunk';\nimport { RouteComponentProps } from \"react-router\";\nimport { AppState } from 'store/store';\n\nimport './Timer.scss'\n\ninterface TimerProps {\n    letter: string\n}\ntype Props = TimerProps & LinkStateProp & LinkDispatchprop & RouteComponentProps;\n\nclass Timer extends React.Component<Props, any> {\n    private block = createRef<HTMLDivElement>();\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n        }\n    }\n\n    render() {\n        let {getTimeString} = this.props;\n        return (\n            <div\n                className={cn(\"timer\")}\n            >\n                Your score {getTimeString()}\n            </div>\n        )\n    }\n}\n\ninterface LinkDispatchprop {\n    stopTimer:()=>void;\n    getTimeString:()=>void;\n}\nfunction mdtp(dispatch: ThunkDispatch<any, any, Actions.AppActions>, ownProps: Props): LinkDispatchprop {\n    return bindActionCreators({\n        stopTimer: Actions.stopTimer,\n        getTimeString: Actions.getTimeString,\n    }, dispatch);\n}\n\ninterface LinkStateProp {\n    time:number;\n}\nfunction mstp(state: AppState, ownProps: Props): LinkStateProp {\n    return {\n        time: state.timer.time\n    }\n}\n\nexport default connect(mstp, mdtp)(Timer) as any;\n","import * as React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { AppState } from 'store/store';\r\nimport * as Actions from 'store/actions';\r\n\r\nimport Timer from 'components/Timer/Timer';\r\nimport './Menu.scss'\r\n\r\ninterface MenuProps { }\r\ntype Props = MenuProps & LinkStateProp & LinkDispatchprop & RouteComponentProps;\r\nclass Menu extends React.Component<Props, any> {\r\n\r\n    componentDidMount() {\r\n        if (!this.props.name){\r\n            this.props.history.push('/welcome')\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        let {name} = this.props;\r\n        return (\r\n            <div className=\"menu\">\r\n                <div className=\"menu-wrapper\">\r\n                    <div className=\"menu-col\">\r\n                        <h1  className=\"menu-title\">Good luck, {name}!</h1>\r\n                        <p className=\"menu-subtitle\">Pick up the right cards</p>\r\n                    </div>\r\n                    <div  className=\"menu-col\">\r\n                        <Timer />\r\n                        <p className=\"menu-subtitle\">The faster the better!</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ninterface LinkDispatchprop {\r\n  \r\n}\r\nfunction mdtp( dispatch: ThunkDispatch<any, any, Actions.AppActions>, ownProps: Props ): LinkDispatchprop {\r\n  return bindActionCreators( {\r\n\r\n  }, dispatch );\r\n}\r\n\r\ninterface LinkStateProp {\r\n    name:string\r\n}\r\nfunction mstp( state: AppState, ownProps: Props ): LinkStateProp {\r\n  return {\r\n    name: state.general.name\r\n  }\r\n}\r\n\r\nexport default withRouter( connect( mstp, mdtp )( Menu ) ) as any;\r\n\r\n","import React, { createRef, CSSProperties } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport cn from 'classnames';\nimport * as Actions from 'store/actions';\n\n//Types\nimport { ThunkDispatch } from 'redux-thunk';\nimport { RouteComponentProps } from \"react-router\";\nimport { AppState } from 'store/store';\nimport { DropzoneObject } from 'components/Dropzones/Dropzone';\n\n//Assets\nimport letterZ from 'assets/zoovu-z.svg';\nimport letterV from 'assets/zoovu-v.svg';\nimport letterO from 'assets/zoovu-o.svg';\nimport letterU from 'assets/zoovu-u.svg';\n\nimport './Block.scss'\n\nconst imageMap:any = {\n    'z': letterZ,\n    'v': letterV,\n    'u': letterU,\n    'o': letterO,\n};\nexport type BlockObject = {\n    id: string\n    letter: string\n    initialPos: {\n        x: number\n        y: number\n    } | null\n    position: CSSProperties\n}\n\ninterface BlockProps {\n\n}\ntype Props = BlockProps & BlockObject & LinkStateProp & LinkDispatchprop & RouteComponentProps;\n\nexport class Block extends React.Component<Props, any> {\n    private block = createRef<HTMLDivElement>();\n\n    private inDropzone: DropzoneObject | null;\n    private startPos: DOMRect|null;\n\n    private toSwap: {\n        elem: HTMLDivElement,\n        position: DOMRect,\n        dropTo: DropzoneObject | null\n    } | null;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            icon: null,\n            shift: {},\n        }\n        this.inDropzone = null;\n        this.startPos = null;\n        this.toSwap = null;\n    }\n    componentDidMount() { \n        if(this.block.current){\n            let initialPos = this.block.current.getBoundingClientRect();\n            this.props.setInitialPos(this.props.id, { x: initialPos.left, y: initialPos.top });\n        }\n        this.setState({icon:imageMap[this.props.letter]});\n    }\n    componentDidUpdate(prevProps:Props){\n        if(this.props.letter !== prevProps.letter){\n            this.setState({icon:imageMap[this.props.letter]})\n        }\n    }\n    onmousedown = (event: React.MouseEvent) => {\n        this.startPos = (event.currentTarget as Element).getBoundingClientRect();\n        if(!this.props.timer){\n            this.props.startTimer();\n        }\n        this.setState({\n            shift: {\n                x: event.clientX - this.startPos.left,\n                y: event.clientY - this.startPos.top\n            }\n        });\n        document.addEventListener('mousemove', this.mousemove);\n        document.addEventListener('mouseup', this.mouseup);\n    }\n    mousemove = (event: MouseEvent) => {\n        if(!this.block.current) return;\n        let { shift } = this.state;\n        let newTop = event.clientY - shift.y;\n        let newLeft = event.clientX - shift.x;\n\n        // Tranlations\n        this.block.current.style.top = `${newTop}px`;\n        this.block.current.style.left = `${newLeft}px`;\n\n        this.inDropzone = this.props.movingAt({ x: event.clientX, y: event.clientY });\n\n        // Swap blocks\n        if (this.inDropzone && this.inDropzone.contain && this.inDropzone.contain.id !== this.block.current.id && !this.toSwap && this.startPos) {\n            this.toSwap = {\n                elem: this.inDropzone.contain,\n                position: this.inDropzone.contain.getBoundingClientRect(),\n                dropTo: this.props.movingAt({ x: this.startPos.x, y: this.startPos.y })\n            };\n            this.toSwap.elem.style.top = `${this.startPos.y}px`;\n            this.toSwap.elem.style.left = `${this.startPos.x}px`;\n        }\n\n        if (!this.inDropzone && this.toSwap) {\n            let { position } = this.toSwap;\n            this.toSwap.elem.style.top = `${position.y}px`;\n            this.toSwap.elem.style.left = `${position.x}px`;\n            this.toSwap = null\n        }\n    }\n    mouseup = (event: MouseEvent) => {\n        if(!this.block.current) return;\n        let { shift } = this.state;\n        let newTop = event.clientY - shift.y;\n        let newLeft = event.clientX - shift.x;\n\n        if (this.inDropzone && this.inDropzone.position) {\n            this.move({\n                x: this.inDropzone.position.x,\n                y: this.inDropzone.position.y\n            });\n            this.props.setPosition(this.props.id, { x: this.inDropzone.position.x, y: this.inDropzone.position.y });\n            this.props.removeBlockFromDropzones(this.block.current.id);\n            this.props.dropToDropzone(this.block.current, this.inDropzone.id);\n\n            if (this.inDropzone.accepting !== this.props.letter) {\n                this.props.addTime(10000)\n            }\n        } else {\n            this.props.removeBlockFromDropzones(this.block.current.id);\n            this.props.setPosition(this.props.id, { x: newLeft, y: newTop });\n        }\n\n        if (this.toSwap && this.toSwap.dropTo && this.toSwap.dropTo.position) {\n            this.props.dropToDropzone(this.toSwap.elem, this.toSwap.dropTo.id);\n            this.props.setPosition(this.toSwap.elem.id, { x: this.toSwap.dropTo.position.x, y: this.toSwap.dropTo.position.y });\n            this.toSwap = null\n        }\n\n        this.props.checkAnswers();\n        document.removeEventListener('mousemove', this.mousemove);\n        document.removeEventListener('mouseup', this.mouseup);\n    }\n\n    move = ({ x, y }: { x: number, y: number }) => {\n        if(this.block.current){\n            this.block.current.style.top = `${y}px`;\n            this.block.current.style.left = `${x}px`;\n        }\n    }\n    render() {\n        let { icon } = this.state;\n        let { letter, id, position } = this.props;\n        return (\n            <div\n                id={id}\n                ref={this.block}\n                className={cn(\"dnd-block\")}\n                onMouseDown={this.onmousedown}\n                data-letter={letter}\n                style={{...position}}\n            >\n                <img draggable={false} src={icon} alt={letter} />\n            </div>\n        )\n    }\n}\n\ninterface LinkDispatchprop {\n    movingAt: (coord: { x: number, y: number }) => any;\n    dropToDropzone: (block: HTMLDivElement, id: string) => void\n    cleanDropzone: (id: string) => void\n    removeBlockFromDropzones: (id: string) => void\n    checkAnswers: () => void\n    addTime: (value: number) => void,\n    setInitialPos: (id: string, position: { x: number, y: number }) => void\n    setPosition: (id: string, position: { x: number, y: number }) => void\n    startTimer:()=>void;\n}\nfunction mdtp(dispatch: ThunkDispatch<any, any, Actions.AppActions>, ownProps: Props): LinkDispatchprop {\n    return bindActionCreators({\n        movingAt: Actions.movingAt,\n        dropToDropzone: Actions.dropToDropzone,\n        cleanDropzone: Actions.cleanDropzone,\n        removeBlockFromDropzones: Actions.removeBlockFromDropzones,\n        checkAnswers: Actions.checkAnswers,\n        addTime: Actions.addTime,\n        setInitialPos: Actions.setInitialPos,\n        setPosition: Actions.setPosition,\n        startTimer: Actions.startTimer,\n    }, dispatch);\n}\n\ninterface LinkStateProp {\n    timer:number | undefined\n}\nfunction mstp(state: AppState, ownProps: Props): LinkStateProp {\n    return {\n        timer:state.timer.timer\n    }\n}\n\nexport default connect(mstp, mdtp)(Block) as any;\n","import * as React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport cn from 'classnames';\nimport * as Actions from 'store/actions';\n\n//Types\nimport { ThunkDispatch } from 'redux-thunk';\nimport { RouteComponentProps } from \"react-router\";\nimport { AppState } from 'store/store';\n\n\nimport './Modal.scss'\n\n\ninterface ModalProps { }\ntype Props = ModalProps & LinkStateProp & LinkDispatchprop & RouteComponentProps;\nclass Modal extends React.Component<Props, any> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      countdown: 10,\n      interval: null\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.visible !== prevProps.visible && this.props.visible) {\n      this.startCountdown();\n    }\n    if (this.props.visible !== prevProps.visible && !this.props.visible) {\n      this.setState({ countdown: 10 });\n    }\n  }\n\n  startCountdown = () => {\n    let interval = setInterval(() => {\n      if (this.state.countdown === 0) {\n        clearInterval(this.state.interval);\n        this.props.restartGame()\n      } else {\n        this.setState({ countdown: this.state.countdown - 1 });\n      }\n    }, 1000);\n    this.setState({ interval })\n  }\n\n  render() {\n    let { visible } = this.props;\n    let { countdown } = this.state;\n    return (visible &&\n      <div className={cn(\"modal\")}>\n        <div className={'modal-body'}>\n          Congratulation! You win!\n        <p>Your score:  <span className=\"modal-timer-value\">{this.props.getTimeString()}</span></p>\n          <p className=\"restart\">Restart in...{countdown}</p>\n        </div>\n      </div>\n    )\n  }\n}\n\ninterface LinkDispatchprop {\n  getTimeString: () => any,\n  restartGame: () => void\n}\nfunction mdtp(dispatch: ThunkDispatch<any, any, Actions.AppActions>, ownProps: Props): LinkDispatchprop {\n  return bindActionCreators({\n    getTimeString: Actions.getTimeString,\n    restartGame: Actions.restartGame\n  }, dispatch);\n}\n\ninterface LinkStateProp {\n  visible: boolean\n}\nfunction mstp(state: AppState, ownProps: Props): LinkStateProp {\n  return {\n    visible: state.general.modal.visible\n  }\n}\n\nexport default connect(mstp, mdtp)(Modal) as any;\n","import React, { createRef } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport cn from 'classnames';\nimport * as Actions from 'store/actions';\n\n//Types\nimport { ThunkDispatch } from 'redux-thunk';\nimport { RouteComponentProps } from \"react-router\";\nimport { AppState } from 'store/store';\n\nimport './Dropzone.scss'\nexport type DropzoneObject = {\n    id: string,\n    position: DOMRect | null,\n    accepting: string,\n    order: number,\n    contain: null | HTMLDivElement;\n}\ninterface DropzoneProps {\n}\ntype Props = DropzoneProps & DropzoneObject & LinkStateProp & LinkDispatchprop & RouteComponentProps;\n\nexport class Dropzone extends React.Component<Props, any> {\n    private element = createRef<HTMLDivElement>();\n\n    componentDidMount() {\n        if(this.element.current){\n            let position = this.element.current.getBoundingClientRect()\n            this.props.setDropzonePosition(this.props.id,position)\n        }\n    }\n    render() {\n        return (\n            <div\n                ref={this.element}\n                className={cn(\"dnd-dropzone\")}\n            ></div>\n        )\n    }\n}\n\ninterface LinkDispatchprop {\n    setDropzonePosition: (id:string,position: DOMRect) => void\n}\nfunction mdtp(dispatch: ThunkDispatch<any, any, Actions.AppActions>, ownProps: Props): LinkDispatchprop {\n    return bindActionCreators({\n        setDropzonePosition: Actions.setDropzonePosition,\n    }, dispatch);\n}\n\ninterface LinkStateProp {\n\n}\nfunction mstp(state: AppState, ownProps: Props): LinkStateProp {\n    return {\n\n    }\n}\n\nexport default connect(mstp, mdtp)(Dropzone) as any;\n","import * as React from 'react';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport cn from 'classnames';\r\nimport * as Actions from 'store/actions';\r\n\r\nimport Menu from 'components/Menu/Menu';\r\nimport Block, { BlockObject } from 'components/Block/Block';\r\nimport Modal from 'components/Modal/Modal';\r\n\r\n//Types\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { AppState } from 'store/store';\r\n\r\n\r\nimport './Game.scss'\r\nimport Dropzone, { DropzoneObject } from 'components/Dropzones/Dropzone';\r\n\r\n\r\ninterface GameProps { }\r\ntype Props = GameProps & LinkStateProp & LinkDispatchprop & RouteComponentProps;\r\nexport class Game extends React.Component<Props, any> {\r\n\r\n  render() {\r\n    let { blocks, dropzones } = this.props;\r\n    return (\r\n      <div className={cn(\"game\")}>\r\n        <Menu />\r\n        <div className=\"game-area\">\r\n          <div className=\"game-objects\">\r\n            {blocks.map((block: BlockObject, index: number) => {\r\n              return (\r\n                <Block key={block.id} {...block} />\r\n              )\r\n            })}\r\n          </div>\r\n          <div className=\"game-zones\">\r\n            {\r\n              dropzones.map((dropzone: DropzoneObject, index: number) => {\r\n                return <Dropzone key={dropzone.id} {...dropzone} />\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n        <Modal />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\ninterface LinkDispatchprop {\r\n\r\n}\r\nfunction mdtp(dispatch: ThunkDispatch<any, any, Actions.AppActions>, ownProps: Props): LinkDispatchprop {\r\n  return bindActionCreators({\r\n\r\n  }, dispatch);\r\n}\r\n\r\ninterface LinkStateProp {\r\n  blocks: BlockObject[]\r\n  dropzones: DropzoneObject[]\r\n}\r\nfunction mstp(state: AppState, ownProps: Props): LinkStateProp {\r\n  return {\r\n    blocks: state.block.list,\r\n    dropzones: state.dropzone.list\r\n  }\r\n}\r\n\r\nexport default connect(mstp, mdtp)(Game) as any;\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport { WelcomeConfig } from 'pages/Welcome/WelcomeConfig';\r\nimport { GameConfig } from 'pages/Game/GameConfig';\r\n\r\n\r\nlet routeConfig = [\r\n    WelcomeConfig,\r\n    GameConfig\r\n]\r\n\r\nexport const routes: object[] = [\r\n    ...routeConfig,\r\n    {\r\n        path: '/',\r\n        component: () => <Redirect to=\"/welcome\" />\r\n    }\r\n];","import Game from './Game';\r\n\r\nexport const GameConfig = {\r\n  path: '/game',\r\n  component: Game\r\n}","import * as React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { Router } from 'react-router-dom';\n\nimport Game from './Game';\n\nimport store from './store/store';\nimport history from './config/browserHistory';\nimport {routes} from './config/routes';\n\nimport './index.scss';\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router history={history}>\n            <Game routes={routes}  />\n        </Router>\n    </Provider>\n    , document.getElementById( 'root' ) );\n"],"sourceRoot":""}